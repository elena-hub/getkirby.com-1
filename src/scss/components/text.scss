/* -----  General Spacing Rules  -------------------------------------------- */

.text {
  counter-reset: h2;
}

.text p,
.text h1,
.text h2,
.text h3,
.text h4,
.text h5,
.text h6,
.text ul,
.text ol,
.text dl,
.text hr,
.text table,
.text figure,
.text blockquote {
  margin-bottom: 1.5rem;
}

.text > *:first-child {
  margin-top: 0 !important;
}

.text > *:last-child {
  margin-bottom: 0 !important;
}

.text p > a,
.text li > a,
.text p > strong > a,
.text li > strong > a {
  text-decoration: underline;
}

/* -----  Headings  --------------------------------------------------------- */

.text h1,
.text .h1 {
  color: $color-black;
}

.text h2,
.text .h2 {
  counter-increment: h2;
  margin-top: 4.5rem;
  position: relative;

  a {
    display: block;
    margin-bottom: 4.5rem;
  }
}

.text h2 a::before {
  border-top: 4px solid $color-syntax-yellow;
  bottom: -1.75rem;
  content: "# " counter(h2, decimal-leading-zero);
  font-family: $font-mono;
  font-size: .75rem;
  font-weight: 400;
  padding-top: .45rem;
  position: absolute;
}

.text h3,
.text .h3 {
  margin-top: 3rem;
  padding-bottom: .5rem;
}

.text h4,
.text .h4 {
  margin-top: 1.5rem;
}

/* -----  Icons  ------------------------------------------------------------ */

.text h2 .icon * {
  fill: #000;
}

/* -----  Images & Figures  ------------------------------------------------- */

.text figure {
  margin-top: 1.5em;
}

.text figure > a {
  display: block;
}

.text img {
  height: auto;
  max-width: 100%;
}

.text .img-wrap {
  display: block;
  position: relative;
  z-index: 0;
}

/**
 * 1. Setting the width of the placeholder element and adding
 *    `overflow: hidden` prevents rendering bugs in IE 11.
 */
.text .img-ratio-placeholder {
  display: block;
  height: 0;
  overflow: hidden; /* 1 */
  width: 100%; /* 1 */
  z-index: -1;
}

.text .img-wrap img {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

.text .figure figcaption {
  color: rgba($color-anthracite, .8);
  display: block;
  font-family: $font-mono;
  font-size: .875rem;
  padding: .75rem 0 0;
}

/* -----  Lists  ------------------------------------------------------------ */

/**
 * 1. Markdown sometimes creates `<p>` tags inside of lists,
 *    which whould not add additional margins.
 */
.text ol:not([class]) > li > *:first-child,
.text ul:not([class]) > li > *:first-child {
  margin-top: 0 !important; /* 1 */
}

.text ol:not([class]) > li > *:last-child,
.text ul:not([class]) > li > *:last-child {
  margin-bottom: 0 !important; /* 1 */
}

/**
 * 1. Using relative em values for list bullets to make them
 *    scalable according to text size.
 */
.text ul:not([class]) > li {
  background: linear-gradient(currentColor, currentColor) #{em(12px, 18px)} #{em(11px, 18px)} / #{em(7px, 18px)} #{em(7px, 18px)} no-repeat; /* 1 */
  padding-left: em(32px, 18px);
}

.text ol:not([class]) {
  counter-reset: ordered-list;
  list-style: decimal;
}

/**
 * 1. To get a decent spacing between the number and list
 *    item content, a combination of margin and padding is
 *    needed.
 */
.text ol:not([class]) > li {
  margin-left: em(24px, 18px); /* 1 */
  padding-left: em(8px, 18px); /* 1 */
}

/* -----  Inline Code & Code Blocks  ---------------------------------------- */

/* => see code.scss */

/* -----  Tables  ----------------------------------------------------------- */

@include mq(to s) {
  .text .table-wrap {
    margin-bottom: $element-spacing;
    overflow: scroll;
    -webkit-overflow-scrolling: touch;
    overflow-y: hidden;
    position: relative;
  }

  .text .table-wrap table {
    margin-bottom: 0;
    min-width: 100%;
    width: auto;
  }

  .text .table-wrap th {
    min-width: 8em;
    white-space: nowrap;
  }
}

.text table {
  border: 1px solid $color-background;
  border-radius: $border-radius;
  border-spacing: 0;
  overflow: hidden;
  // table-layout: fixed;
  width: 100%;
}

.text th,
.text td {
  border-bottom: 1px solid $color-background;
  font-size: .875rem;
  line-height: 1.5;
  padding: .5rem .75rem;
  text-align: left;
  vertical-align: top;
}

.text th {
  font-weight: 700;
  white-space: nowrap;
}

.text tr th:last-child,
.text tr td:last-child {
  border-right: 0;
}

.text tr:nth-child(odd) td {
  background: #fafafa;
}

.text tr:last-child td {
  border-bottom: 0;
}

/* -----  Properties Table  ------------------------------------------------- */

/**
 * Empty property value, e.g. for "required: no" and "–".
 */
.text .properties-empty {
  color: rgba($color-black, .6);
}

/**
 * First column is always the property name.
 */
.text .properties td:first-child code {
  background: transparent;
  padding-left: 0;
  padding-right: 0;
}

/**
 * Render property table as list on mobile devices.
 */
@include mq(to l) {
  .text .properties {
    border: none;
  }

  .text .properties,
  .text .properties tbody,
  .text .properties th,
  .text .properties td {
    display: block;
  }

  /**
   * Table header is only visually hidden, to stay accessible
   * for screen readers and robots.
   *
   * 1. Prevents most screen readers from announcing broken words as
   *    they would appear visually and reads them as defined in source.
   */
  .text .properties thead {
    clip: rect(1px, 1px, 1px, 1px);
    display: block;
    height: 1px;
    left: -1000px;
    overflow: hidden;
    position: absolute;
    width: 1px;
    word-wrap: normal !important; /* 1 */
  }

  .text .properties tr {
    background: #fff;
    border: 1px solid $color-background;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  }

  .text .properties tr + tr {
    margin-top: 1em;
  }

  .text .properties tr td {
    background: #fff;
    border: none;
  }

  .text .properties td:first-child {
    flex: 0 0 auto;
    font-weight: 700;
    padding-right: 1ch;
  }

  /**
   * Seconds property is always treated as type on mobile.
   */
  .text .properties td:nth-child(2) {
    flex: 2 0 0;
    padding-left: 0;
  }

  .text .properties td:first-child,
  .text .properties td:nth-child(2) {
    background: #fafafa;
    order: 1;
  }

  /**
   * "Hack" to generate a separator between the property header
   * (property name and type) and all other properties. This
   * element ensures, that these properties always span the
   * whole width of their container.
   */
  .text .properties tr::before {
    border-bottom: 1px solid $color-background;
    content: "";
    display: block;
    height: 0;
    order: 2;
    width: 100%;
  }

  .text .properties td:nth-child(n + 3) {
    order: 3;
  }

  /**
   * Last element is always treated as description and thus
   * should span the whole width of the container.
   */
  .text .properties td:last-child {
    border-bottom: none;
    width: 100%;
  }

  /**
   * Label is only shown on mobile devices. Using a
   * pseudo-element should be fine, cause a11y is handled
   * by the table header.
   */
  .text .properties td[data-property-label]::before {
    content: attr(data-property-label) " ";
    font-weight: 700;
  }
}

@include mq(from l) {
  .text .properties td:last-child {
    min-width: 8em;
  }
}

/* -----  Footnotes  -------------------------------------------------------- */

.text .footnote-ref {
  border-bottom: 0;
}

.text .footnotes .footnote-backref {
  border-bottom: 0;
}

/* -----  Info & Warning Boxes  --------------------------------------------- */

.text .info,
.text .warning {
  border-left: 4px solid;
  border-radius: $border-radius;
  margin-bottom: 1.5em;
  padding: 1rem 1rem 1rem 2.5rem;
  position: relative;

  > :first-child {
    margin-top: 0 !important;
  }

  > :last-child {
    margin-bottom: 0 !important;
  }

  > .icon {
    left: .75rem;
    position: absolute;
    top: 1.375rem; // 22px
  }
}

.text .info {
  background: $color-info-background;
  border-left-color: $color-blue;

  > .icon {
    fill: $color-blue;
  }
}

.text .warning {
  background: $color-warning-background;
  border-left-color: $color-yellow;

  > .icon {
    fill: $color-yellow;
  }
}

/* ·····  Tables in Info and Warning Boxes  ································· */

.text .info table {
  background: mix($color-white, $color-info-background, 30%);
}

.text .info th {
  background: mix($color-blue, $color-info-background, 20%);
  color: $color-black;
}

.text .warning table {
  background: mix($color-white, $color-warning-background, 50%);
}

.text .warning th {
  background: mix($color-yellow, $color-warning-background, 25%);
  color: $color-black;
}

/* -----  Columns Plugin (columns...)  -------------------------------------- */

.columns {
  margin-bottom: 1.5em;
  margin-top: 1.5em;
}

@include mq(to s) {
  .columns .column:not(:last-child) {
    margin-bottom: 1em;
  }
}

@include mq(from s) {
  .columns {
    display: flex;
    margin-left: -1rem;
    margin-right: -1rem;
  }

  .columns .column {
    padding-left: 1rem;
    padding-right: 1rem;
  }

  .columns .column > *:first-child {
    margin-top: 0 !important;
  }

  .columns .column > *:last-child {
    margin-bottom: 0 !important;
  }

  .columns-1 .column { flex-basis: percentage(1 / 1); }
  .columns-2 .column { flex-basis: percentage(1 / 2); }
  .columns-3 .column { flex-basis: percentage(1 / 3); }
  .columns-4 .column { flex-basis: percentage(1 / 4); }
}

/* -----  Tabs Plugin (tabs...)  -------------------------------------------- */

.text .tabs {
  margin-bottom: 3rem;
  margin-top: 3rem;
}

/* -----  Video KirbyTag  --------------------------------------------------- */

.text .video {
  position: relative;
}

.text .video::before {
  content: "";
  display: block;
  height: 0;
  padding-top: percentage(9 / 16);
  width: 100%;
}

.text .video iframe {
  border: 0;
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

hr {
  border: 0;
  height: 4px;
  position: relative;
}

hr::after {
  background: $color-background;
  content: "";
  height: 4px;
  left: 0;
  margin-top: -2px;
  position: absolute;
  right: 0;
  top: 50%;
}

.text hr {
  height: 6rem;
}

.text .codeblock {
  margin-bottom: 1.5rem;
}

/* -----  Datatypes  -------------------------------------------------------- */

.text .type {
  white-space: nowrap;
}

.text .type-separator {
  padding: 0 .125rem;
}

.text .type.type-string {
  background: mix($color-syntax-green, $color-white, 40%);
}

.text .type.type-int {
  background: mix($color-syntax-orange, $color-white, 40%);
}

.text .type.type-float {
  background: mix($color-syntax-red, $color-white, 40%);
}

.text .type.type-bool {
  background: mix($color-syntax-purple, $color-white, 40%);
}

.text .type.type-array {
  background: mix($color-syntax-aqua, $color-white, 40%);
}

.text .type.type-object,
.text .type.type-class {
  background: mix($color-syntax-yellow, $color-white, 40%);
}

.text .type.type-mixed {
  background: mix($color-syntax-blue, $color-white, 40%);
}
